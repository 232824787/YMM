//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "UIView.h"

#import "AMapNaviDriveDataRepresentable.h"
#import "MAMapViewDelegate.h"

@class AMapNaviCarAnnotation, AMapNaviCarAnnotationView, AMapNaviCongestionInfo, AMapNaviGuidePolyline, AMapNaviInfo, AMapNaviLocation, AMapNaviNotAvoidFacilityAndForbiddenInfo, AMapNaviPoint, AMapNaviRoute, AMapNaviTimerTarget, MACustomCalloutView, MAMapView, NSArray, NSDictionary, NSMutableArray, NSMutableDictionary, NSString, NSTimer, UIColor, UIImage;

@interface AMapNaviMapView : UIView <MAMapViewDelegate, AMapNaviDriveDataRepresentable>
{
    _Bool _autoZoomMapLevel;
    _Bool _autoSwitchDayNightType;
    _Bool _showStandardNightType;
    _Bool _showCamera;
    _Bool _showTurnArrow;
    _Bool _showVectorline;
    _Bool _showGreyAfterPass;
    _Bool _routePolylineShowTraffic;
    _Bool _showTrafficLights;
    _Bool _showCar;
    _Bool _showRoute;
    _Bool _showCongestionInfoBubble;
    _Bool _autoSwitchShowModeToCarPositionLocked;
    _Bool _lockCarPosition;
    _Bool _moveDirectly;
    _Bool _needMovingCar;
    _Bool _needUpdatingMap;
    _Bool _typeCameraBubbleAnnotationHasAdd;
    _Bool _cameraIconAnnotationHasAdd;
    _Bool _trafficLightAnnotaionHasAdd;
    _Bool _routeTurnArrowHasAdd;
    _Bool _congestionInfoAnnoationHasAdd;
    _Bool _backupRouteRoadNameAnnoationHasAdd;
    int _indexOfCurrentSplittedPolyline;
    int _indexOfCurrentPointInCurrentSplittedPolyline;
    id <AMapNaviMapViewDelegate> _delegate;
    long long _trackingMode;
    long long _showMode;
    double _cameraDegree;
    UIColor *_turnArrowColor;
    double _turnArrowWidth;
    double _dashedLineWidth;
    UIColor *_dashedLineColor;
    UIColor *_backupRoutedashedLineColor;
    UIColor *_dashedLineGreyColor;
    double _lineWidth;
    UIImage *_greyTexture;
    NSDictionary *_statusTextures;
    UIImage *_normalTexture;
    MACustomCalloutView *_customCalloutView;
    MAMapView *_internalMapView;
    AMapNaviPoint *_searchEndPoint;
    NSArray *_searchWayPoints;
    NSTimer *_moveCarTimer;
    AMapNaviTimerTarget *_moveCarTimerTarget;
    AMapNaviCarAnnotation *_carAnnotation;
    AMapNaviCarAnnotationView *_carAnnotationView;
    long long _moveCarSplitCount;
    long long _moveCarStepCount;
    double _priorCarDirecion;
    double _latOffset;
    double _lonOffset;
    double _carDirectionOffset;
    long long _updateMapSplitCount;
    long long _updateMapStepCount;
    double _priorMapRotationDegree;
    double _priorZoomLevel;
    double _mapRotationOffset;
    double _zoomLevelOffset;
    NSTimer *_autoSwitchToCarPositionLockedTimer;
    AMapNaviTimerTarget *_autoSwitchToCarPositionLockedTimerTarget;
    long long _currentNaviMode;
    AMapNaviInfo *_currentNaviInfo;
    AMapNaviLocation *_currentCarLocation;
    NSArray *_cameraInfos;
    AMapNaviCongestionInfo *_congestionInfo;
    AMapNaviRoute *_currentNaviRoute;
    NSArray *_splittedPolylines;
    NSMutableArray *_backupSplittedPolylines;
    AMapNaviNotAvoidFacilityAndForbiddenInfo *_notAvoidInfoInNaviInfo;
    AMapNaviGuidePolyline *_carToDestinationGuidePolyline;
    UIImage *_startPointImage;
    UIImage *_cameraImage;
    UIImage *_wayPointImage;
    UIImage *_endPointImage;
    UIImage *_carImage;
    UIImage *_carCompassImage;
    NSTimer *_switchDayNightModeTimer;
    AMapNaviTimerTarget *_switchDayNightModeTimerTarget;
    NSArray *_backupRoutes;
    NSMutableDictionary *_backupRouteAnnotationDic;
    NSTimer *_backupRouteAnnoCanFindSuitablePosInLockedCarTimer;
    AMapNaviTimerTarget *_backupRouteAnnoCanFindSuitablePosInLockedCarTimerTarget;
    id <MAMapViewDelegate> _mapViewDelegateForOutter;
    struct MAMapPoint _priorPoint;
}

@property(nonatomic) __weak id <MAMapViewDelegate> mapViewDelegateForOutter; // @synthesize mapViewDelegateForOutter=_mapViewDelegateForOutter;
@property(retain, nonatomic) AMapNaviTimerTarget *backupRouteAnnoCanFindSuitablePosInLockedCarTimerTarget; // @synthesize backupRouteAnnoCanFindSuitablePosInLockedCarTimerTarget=_backupRouteAnnoCanFindSuitablePosInLockedCarTimerTarget;
@property(retain, nonatomic) NSTimer *backupRouteAnnoCanFindSuitablePosInLockedCarTimer; // @synthesize backupRouteAnnoCanFindSuitablePosInLockedCarTimer=_backupRouteAnnoCanFindSuitablePosInLockedCarTimer;
@property(retain, nonatomic) NSMutableDictionary *backupRouteAnnotationDic; // @synthesize backupRouteAnnotationDic=_backupRouteAnnotationDic;
@property(copy, nonatomic) NSArray *backupRoutes; // @synthesize backupRoutes=_backupRoutes;
@property(retain, nonatomic) AMapNaviTimerTarget *switchDayNightModeTimerTarget; // @synthesize switchDayNightModeTimerTarget=_switchDayNightModeTimerTarget;
@property(retain, nonatomic) NSTimer *switchDayNightModeTimer; // @synthesize switchDayNightModeTimer=_switchDayNightModeTimer;
@property(retain, nonatomic) UIImage *carCompassImage; // @synthesize carCompassImage=_carCompassImage;
@property(retain, nonatomic) UIImage *carImage; // @synthesize carImage=_carImage;
@property(retain, nonatomic) UIImage *endPointImage; // @synthesize endPointImage=_endPointImage;
@property(retain, nonatomic) UIImage *wayPointImage; // @synthesize wayPointImage=_wayPointImage;
@property(retain, nonatomic) UIImage *cameraImage; // @synthesize cameraImage=_cameraImage;
@property(retain, nonatomic) UIImage *startPointImage; // @synthesize startPointImage=_startPointImage;
@property(retain, nonatomic) AMapNaviGuidePolyline *carToDestinationGuidePolyline; // @synthesize carToDestinationGuidePolyline=_carToDestinationGuidePolyline;
@property(nonatomic) _Bool backupRouteRoadNameAnnoationHasAdd; // @synthesize backupRouteRoadNameAnnoationHasAdd=_backupRouteRoadNameAnnoationHasAdd;
@property(nonatomic) _Bool congestionInfoAnnoationHasAdd; // @synthesize congestionInfoAnnoationHasAdd=_congestionInfoAnnoationHasAdd;
@property(nonatomic) _Bool routeTurnArrowHasAdd; // @synthesize routeTurnArrowHasAdd=_routeTurnArrowHasAdd;
@property(nonatomic) _Bool trafficLightAnnotaionHasAdd; // @synthesize trafficLightAnnotaionHasAdd=_trafficLightAnnotaionHasAdd;
@property(nonatomic) _Bool cameraIconAnnotationHasAdd; // @synthesize cameraIconAnnotationHasAdd=_cameraIconAnnotationHasAdd;
@property(nonatomic) _Bool typeCameraBubbleAnnotationHasAdd; // @synthesize typeCameraBubbleAnnotationHasAdd=_typeCameraBubbleAnnotationHasAdd;
@property(retain, nonatomic) AMapNaviNotAvoidFacilityAndForbiddenInfo *notAvoidInfoInNaviInfo; // @synthesize notAvoidInfoInNaviInfo=_notAvoidInfoInNaviInfo;
@property(retain, nonatomic) NSMutableArray *backupSplittedPolylines; // @synthesize backupSplittedPolylines=_backupSplittedPolylines;
@property(copy, nonatomic) NSArray *splittedPolylines; // @synthesize splittedPolylines=_splittedPolylines;
@property(retain, nonatomic) AMapNaviRoute *currentNaviRoute; // @synthesize currentNaviRoute=_currentNaviRoute;
@property(retain, nonatomic) AMapNaviCongestionInfo *congestionInfo; // @synthesize congestionInfo=_congestionInfo;
@property(copy, nonatomic) NSArray *cameraInfos; // @synthesize cameraInfos=_cameraInfos;
@property(retain, nonatomic) AMapNaviLocation *currentCarLocation; // @synthesize currentCarLocation=_currentCarLocation;
@property(retain, nonatomic) AMapNaviInfo *currentNaviInfo; // @synthesize currentNaviInfo=_currentNaviInfo;
@property(nonatomic) long long currentNaviMode; // @synthesize currentNaviMode=_currentNaviMode;
@property(retain, nonatomic) AMapNaviTimerTarget *autoSwitchToCarPositionLockedTimerTarget; // @synthesize autoSwitchToCarPositionLockedTimerTarget=_autoSwitchToCarPositionLockedTimerTarget;
@property(retain, nonatomic) NSTimer *autoSwitchToCarPositionLockedTimer; // @synthesize autoSwitchToCarPositionLockedTimer=_autoSwitchToCarPositionLockedTimer;
@property(nonatomic) double zoomLevelOffset; // @synthesize zoomLevelOffset=_zoomLevelOffset;
@property(nonatomic) double mapRotationOffset; // @synthesize mapRotationOffset=_mapRotationOffset;
@property(nonatomic) double priorZoomLevel; // @synthesize priorZoomLevel=_priorZoomLevel;
@property(nonatomic) double priorMapRotationDegree; // @synthesize priorMapRotationDegree=_priorMapRotationDegree;
@property(nonatomic) long long updateMapStepCount; // @synthesize updateMapStepCount=_updateMapStepCount;
@property(nonatomic) long long updateMapSplitCount; // @synthesize updateMapSplitCount=_updateMapSplitCount;
@property(nonatomic) _Bool needUpdatingMap; // @synthesize needUpdatingMap=_needUpdatingMap;
@property(nonatomic) double carDirectionOffset; // @synthesize carDirectionOffset=_carDirectionOffset;
@property(nonatomic) double lonOffset; // @synthesize lonOffset=_lonOffset;
@property(nonatomic) double latOffset; // @synthesize latOffset=_latOffset;
@property(nonatomic) double priorCarDirecion; // @synthesize priorCarDirecion=_priorCarDirecion;
@property(nonatomic) struct MAMapPoint priorPoint; // @synthesize priorPoint=_priorPoint;
@property(nonatomic) long long moveCarStepCount; // @synthesize moveCarStepCount=_moveCarStepCount;
@property(nonatomic) long long moveCarSplitCount; // @synthesize moveCarSplitCount=_moveCarSplitCount;
@property(nonatomic) _Bool needMovingCar; // @synthesize needMovingCar=_needMovingCar;
@property(nonatomic) _Bool moveDirectly; // @synthesize moveDirectly=_moveDirectly;
@property(retain, nonatomic) AMapNaviCarAnnotationView *carAnnotationView; // @synthesize carAnnotationView=_carAnnotationView;
@property(retain, nonatomic) AMapNaviCarAnnotation *carAnnotation; // @synthesize carAnnotation=_carAnnotation;
@property(retain, nonatomic) AMapNaviTimerTarget *moveCarTimerTarget; // @synthesize moveCarTimerTarget=_moveCarTimerTarget;
@property(retain, nonatomic) NSTimer *moveCarTimer; // @synthesize moveCarTimer=_moveCarTimer;
@property(retain, nonatomic) NSArray *searchWayPoints; // @synthesize searchWayPoints=_searchWayPoints;
@property(retain, nonatomic) AMapNaviPoint *searchEndPoint; // @synthesize searchEndPoint=_searchEndPoint;
@property(nonatomic) int indexOfCurrentPointInCurrentSplittedPolyline; // @synthesize indexOfCurrentPointInCurrentSplittedPolyline=_indexOfCurrentPointInCurrentSplittedPolyline;
@property(nonatomic) int indexOfCurrentSplittedPolyline; // @synthesize indexOfCurrentSplittedPolyline=_indexOfCurrentSplittedPolyline;
@property(nonatomic) _Bool lockCarPosition; // @synthesize lockCarPosition=_lockCarPosition;
@property(retain, nonatomic) MAMapView *internalMapView; // @synthesize internalMapView=_internalMapView;
@property(nonatomic) _Bool autoSwitchShowModeToCarPositionLocked; // @synthesize autoSwitchShowModeToCarPositionLocked=_autoSwitchShowModeToCarPositionLocked;
@property(nonatomic) _Bool showCongestionInfoBubble; // @synthesize showCongestionInfoBubble=_showCongestionInfoBubble;
@property(nonatomic) _Bool showRoute; // @synthesize showRoute=_showRoute;
@property(nonatomic) _Bool showCar; // @synthesize showCar=_showCar;
@property(nonatomic) _Bool showTrafficLights; // @synthesize showTrafficLights=_showTrafficLights;
@property(retain, nonatomic) MACustomCalloutView *customCalloutView; // @synthesize customCalloutView=_customCalloutView;
@property(copy, nonatomic) UIImage *normalTexture; // @synthesize normalTexture=_normalTexture;
@property(nonatomic) _Bool routePolylineShowTraffic; // @synthesize routePolylineShowTraffic=_routePolylineShowTraffic;
@property(copy, nonatomic) NSDictionary *statusTextures; // @synthesize statusTextures=_statusTextures;
@property(copy, nonatomic) UIImage *greyTexture; // @synthesize greyTexture=_greyTexture;
@property(nonatomic) double lineWidth; // @synthesize lineWidth=_lineWidth;
@property(retain, nonatomic) UIColor *dashedLineGreyColor; // @synthesize dashedLineGreyColor=_dashedLineGreyColor;
@property(retain, nonatomic) UIColor *backupRoutedashedLineColor; // @synthesize backupRoutedashedLineColor=_backupRoutedashedLineColor;
@property(retain, nonatomic) UIColor *dashedLineColor; // @synthesize dashedLineColor=_dashedLineColor;
@property(nonatomic) double dashedLineWidth; // @synthesize dashedLineWidth=_dashedLineWidth;
@property(nonatomic) _Bool showGreyAfterPass; // @synthesize showGreyAfterPass=_showGreyAfterPass;
@property(nonatomic) _Bool showVectorline; // @synthesize showVectorline=_showVectorline;
@property(nonatomic) double turnArrowWidth; // @synthesize turnArrowWidth=_turnArrowWidth;
@property(retain, nonatomic) UIColor *turnArrowColor; // @synthesize turnArrowColor=_turnArrowColor;
@property(nonatomic) _Bool showTurnArrow; // @synthesize showTurnArrow=_showTurnArrow;
@property(nonatomic) _Bool showCamera; // @synthesize showCamera=_showCamera;
@property(nonatomic) _Bool showStandardNightType; // @synthesize showStandardNightType=_showStandardNightType;
@property(nonatomic) _Bool autoSwitchDayNightType; // @synthesize autoSwitchDayNightType=_autoSwitchDayNightType;
@property(nonatomic) double cameraDegree; // @synthesize cameraDegree=_cameraDegree;
@property(nonatomic) _Bool autoZoomMapLevel; // @synthesize autoZoomMapLevel=_autoZoomMapLevel;
@property(nonatomic) long long showMode; // @synthesize showMode=_showMode;
@property(nonatomic) long long trackingMode; // @synthesize trackingMode=_trackingMode;
@property(nonatomic) __weak id <AMapNaviMapViewDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (void)offlineDataDidReload:(id)arg1;
- (void)offlineDataWillReload:(id)arg1;
- (void)mapView:(id)arg1 didIndoorMapHidden:(id)arg2;
- (void)mapView:(id)arg1 didIndoorMapFloorIndexChanged:(id)arg2;
- (void)mapView:(id)arg1 didIndoorMapShowed:(id)arg2;
- (void)mapInitComplete:(id)arg1;
- (void)mapView:(id)arg1 didLongPressedAtCoordinate:(struct CLLocationCoordinate2D)arg2;
- (void)mapView:(id)arg1 didTouchPois:(id)arg2;
- (void)mapView:(id)arg1 didChangeOpenGLESDisabled:(_Bool)arg2;
- (void)mapView:(id)arg1 didChangeUserTrackingMode:(long long)arg2 animated:(_Bool)arg3;
- (void)mapView:(id)arg1 didAnnotationViewCalloutTapped:(id)arg2;
- (void)mapView:(id)arg1 annotationView:(id)arg2 calloutAccessoryControlTapped:(id)arg3;
- (void)mapView:(id)arg1 didAddOverlayRenderers:(id)arg2;
- (void)mapView:(id)arg1 annotationView:(id)arg2 didChangeDragState:(long long)arg3 fromOldState:(long long)arg4;
- (void)mapView:(id)arg1 didFailToLocateUserWithError:(id)arg2;
- (void)mapView:(id)arg1 didUpdateUserLocation:(id)arg2 updatingLocation:(_Bool)arg3;
- (void)mapViewDidStopLocatingUser:(id)arg1;
- (void)mapViewWillStartLocatingUser:(id)arg1;
- (void)mapView:(id)arg1 didSelectAnnotationView:(id)arg2;
- (void)mapViewDidFailLoadingMap:(id)arg1 withError:(id)arg2;
- (void)mapViewDidFinishLoadingMap:(id)arg1;
- (void)mapViewWillStartLoadingMap:(id)arg1;
- (void)mapView:(id)arg1 mapWillZoomByUser:(_Bool)arg2;
- (void)mapView:(id)arg1 mapDidMoveByUser:(_Bool)arg2;
- (void)mapView:(id)arg1 mapWillMoveByUser:(_Bool)arg2;
- (void)testToRemove;
- (void)testToRemove:(long long)arg1;
- (void)testToAddCurrentSegmentLastPointAnnotation:(id)arg1 color:(long long)arg2;
- (void)testToAddCurrentSegmentLastPointAnnotation;
- (void)stopDayNightModeTimer;
- (void)startDayNightModeTimer:(double)arg1;
- (void)updateIfNeedSwitchDayNightMode;
- (double)normalizeOffsetDegree:(double)arg1;
- (void)mapView:(id)arg1 didAnnotationViewTapped:(id)arg2;
- (void)mapView:(id)arg1 didSingleTappedAtCoordinate:(struct CLLocationCoordinate2D)arg2;
- (void)mapView:(id)arg1 didAddAnnotationViews:(id)arg2;
- (void)mapView:(id)arg1 didDeselectAnnotationView:(id)arg2;
- (id)mapView:(id)arg1 viewForAnnotation:(id)arg2;
- (id)mapView:(id)arg1 rendererForOverlay:(id)arg2;
- (void)mapView:(id)arg1 mapDidZoomByUser:(_Bool)arg2;
- (void)mapView:(id)arg1 regionDidChangeAnimated:(_Bool)arg2;
- (void)mapViewRegionChanged:(id)arg1;
- (void)mapView:(id)arg1 regionWillChangeAnimated:(_Bool)arg2;
- (void)updateCarToDestinationGuidePolylineWhenCarMove;
- (void)removeCarToDestinationGuidLine;
- (void)updateCarToDestinationGuidLine;
- (void)removeCongestionInfoAnnotation;
- (void)addCongestionInfoAnnotation:(id)arg1;
- (void)updateCongestionInfoAnnotation:(id)arg1 isNeedForceUpdate:(_Bool)arg2;
- (void)removeTrafficLightAnnotaion;
- (void)addTrafficLightAnnotaion;
- (void)updateTrafficLightAnnotaionIsNeedForceUpdate:(_Bool)arg1;
- (void)updateForbiddenAnnoations;
- (void)removeRouteCameraTypeAnnotation;
- (void)addRouteCameraTypeAnnotationWithCameraInfos:(id)arg1;
- (void)updateRouteCameraAnnotationWithCameraInfos:(id)arg1 isNeedForceUpdate:(_Bool)arg2;
- (void)removeRouteCameraAnnotationIcon;
- (void)addRouteCameraAnnotationIcon;
- (void)updateRouteCameraIconAnnotationIsNeedForceUpdate:(_Bool)arg1;
- (void)removeRouteWayPointAnnotation;
- (void)updateRouteWayPointAnnotation;
- (void)removeNaviRoutePointAnnotation;
- (void)updateRoutePointAnnotation;
- (struct MAMapPoint)getVerticalMappedPointOfPoint:(struct MAMapPoint)arg1 toLineWithBegin:(struct MAMapPoint)arg2 andEnd:(struct MAMapPoint)arg3;
- (long long)getVerticalPointWithEstimateCarPoint:(struct CLLocationCoordinate2D)arg1 toLineWithBegin:(id)arg2 andEnd:(id)arg3 andVertical:(id *)arg4;
- (id)textureImageThatGreyHasPass;
- (void)updatePolyline:(id)arg1 withCoordinate:(id)arg2;
- (void)removeHasPassPartOfDashedLine:(id)arg1 currentPointIndex:(int)arg2 verticalPoint:(id)arg3;
- (void)updateHasPassPartOfTrafficLine:(id)arg1 currentPointIndex:(int)arg2 verticalPoint:(id)arg3;
- (void)updateThePolylineToGrey:(id)arg1;
- (void)updatePolylinesToGreyWhenArrivedDestation:(id)arg1;
- (void)updatePolylinesToGreyThatHasAllPassed:(id)arg1;
- (void)dealWithHasPassToGreyIsNeedHandlePassedPolyline:(_Bool)arg1;
- (void)resetGreyToDefaultWhenCurrentNaviRouteChanged;
- (id)defaultTextureImageForRouteStatus:(long long)arg1 isBackup:(_Bool)arg2;
- (id)textureImageWithTrafficPolyline:(long long)arg1 isBackup:(_Bool)arg2;
- (id)textureImageWithoutTrafficPolylineIsBackup:(_Bool)arg1;
- (void)addRoutePolylineWithoutTrafficStatus;
- (void)addRoutePolylineWithTrafficStatus:(id)arg1 isBackupRoute:(_Bool)arg2;
- (void)removeRoutePolyline;
- (void)updateRoutePolylineMustInMainThread;
- (void)updateRoutePolyline;
- (void)updateWhenFindThePointCanShow:(id)arg1 newPosType:(int)arg2 newPoint:(struct CLLocationCoordinate2D)arg3;
- (struct CGPoint)calculateTheEdgePointWithPosType:(int)arg1 annoation:(id)arg2 viewPoint:(struct CGPoint)arg3;
- (_Bool)calculateThePoint:(struct CLLocationCoordinate2D)arg1 andAddBackupRouteBubbleSize:(id)arg2 isAllIn:(struct CGRect)arg3 posType:(int *)arg4;
- (id)createTheBackupRoute:(id)arg1 isFirstBackupRoute:(_Bool)arg2 annoationLevelPoint:(id)arg3 secondLevelArray:(id *)arg4;
- (id)createBackupRouteSuitablePosArray:(id)arg1 isFirstBackup:(_Bool)arg2;
- (void)findSuitablePosForBackupRouteAnnoation:(id)arg1;
- (void)updateBackupRouteRoadNameAnnotationIsNeedForceUpdate:(_Bool)arg1;
- (void)updateBackupRouteRoadNameInfoWhenNaviInfoUpdate:(_Bool)arg1;
- (void)timeIsUpAndCanfindSuitablePosForBackupRouteAnnoation;
- (void)startBackupRouteAnnoCanFindSuitablePosInLockedCarTimer;
- (void)handleTheBackupRouteBubbleWhenRegionDidChange;
- (void)removeBackupRouteRoadNameAnnotation:(_Bool)arg1;
- (void)addBackupRouteRoadNameAnnotation;
- (void)createBackupRouteRoadNameAnnotation:(id)arg1 isFirstBackup:(_Bool)arg2;
- (void)dealWithWhenChangePathToMainPath:(id)arg1;
- (void)switchBackupRouteToCurrentWhenTap:(struct CLLocationCoordinate2D)arg1;
- (void)removeBackupRoutePolyline;
- (void)updateBackupRoutePolylineMustInMainThread;
- (void)updateBackupRoutePolyline;
- (void)removeRouteTurnArrowPolyline;
- (id)getRouteTurnArrowPolylineWithSegmentIndex:(long long)arg1;
- (void)addRouteTurnArrowPolylineWithSegmentIndex:(long long)arg1;
- (void)updateRouteTurnArrowPolylineWithSegmentIndex:(long long)arg1 isNeedForceUpdate:(_Bool)arg2;
- (void)driveViewInternalAutoSwitchToLockedCar;
- (void)stopAutoSwitchToCarLockedTimer;
- (void)startAutoSwitchToCarLockedTimer;
- (void)updateAnnotationsAndOverlaysWhenMapDidZoomIsNeedForceUpdate:(_Bool)arg1;
- (void)configureMapView;
- (void)moveCarAnnotationTo:(id)arg1 zoomLevel:(double)arg2;
- (void)updateMapSmoothWithCurrentCarCoordinate:(struct CLLocationCoordinate2D)arg1;
- (void)moveCarLocationSmooth:(id)arg1;
- (void)stopMoveCarTimer;
- (void)startMoveCarTimer;
- (double)getLockStateFlexZoomLevel;
- (void)showMapRegionWithBounds:(id)arg1 centerCoordinate:(id)arg2 animaiton:(_Bool)arg3;
- (void)updateMapStatusWithAnimation:(_Bool)arg1 rotationDegree:(double)arg2 zoomLevel:(double)arg3 center:(struct CLLocationCoordinate2D)arg4;
- (void)updateCarAnnotationAfterMapRotationDegreeAndCameraDegreeHaveRightValue;
- (void)driveManager:(id)arg1 updateCongestionInfo:(id)arg2;
- (void)driveManager:(id)arg1 updateBackupRoute:(id)arg2;
- (void)driveManager:(id)arg1 updateTrafficStatus:(id)arg2;
- (void)driveManager:(id)arg1 updateNaviLocation:(id)arg2;
- (void)driveManager:(id)arg1 updateCameraInfos:(id)arg2;
- (void)driveManager:(id)arg1 updateNaviInfo:(id)arg2;
- (void)driveManager:(id)arg1 updateNaviRoute:(id)arg2;
- (void)driveManager:(id)arg1 updateNaviMode:(long long)arg2;
- (void)touchesBegan:(id)arg1 withEvent:(id)arg2;
- (void)updateRoutePolylineInTheVisualRangeWhenTheShowModeIsOverview;
- (void)removeCustomAnnotation:(id)arg1;
- (void)addCustomAnnotation:(id)arg1;
@property(readonly, nonatomic) __weak MAMapView *mapViewForOutter;
- (id)mapViewLogoImageView;
- (void)setCustomMapStyleWithWebData:(id)arg1;
- (void)delayToSetMapViwTypeNightOrNaviBecauseOfDiceBug;
@property(nonatomic) _Bool customMapStyleEnabled;
@property(nonatomic) struct CGPoint screenAnchor;
@property(readonly, nonatomic) double maxZoomLevel;
@property(readonly, nonatomic) double minZoomLevel;
@property(nonatomic) double mapZoomLevel;
@property(nonatomic) _Bool mapShowTraffic;
@property(readonly, nonatomic) struct CGSize compassSize;
@property(nonatomic) struct CGPoint compassOrigin;
@property(nonatomic) _Bool showCompass;
@property(nonatomic) struct CGPoint scaleOrigin;
@property(nonatomic) _Bool showScale;
@property(nonatomic) struct CGPoint logoCenter;
@property(readonly, nonatomic) struct CGSize logoSize;
- (void)handleShowModeToOverview;
- (void)handleShowModeToLockedCarPosition;
- (void)handleShowModeToNormal;
- (void)initProperties;
- (void)setUp;
- (void)dealloc;
- (id)initWithFrame:(struct CGRect)arg1;
- (id)initWithCoder:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

