//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "AMapNaviBaseManager.h"

#import "AMapNaviCoreCombineDelegate.h"
#import "AMapNaviSearchManagerDelegate.h"

@class AMapNaviBatchRequest, AMapNaviCameraInfo, AMapNaviCongestionInfo, AMapNaviCoreCombine, AMapNaviCruiseInfo, AMapNaviInfo, AMapNaviLocation, AMapNaviPOIInfo, AMapNaviParallelRoadStatus, AMapNaviRoute, AMapNaviRouteNotifyData, AMapNaviSearchManager, AMapNaviTimerTarget, MAMapView, NSArray, NSDictionary, NSMutableArray, NSString, NSTimer, UIImage;

@interface AMapNaviDriveManager : AMapNaviBaseManager <AMapNaviCoreCombineDelegate, AMapNaviSearchManagerDelegate>
{
    NSArray *_wayPoints;
    _Bool _shouldCallHideCrossImage;
    _Bool _updateCameraInfo;
    _Bool _updateTrafficInfo;
    _Bool _isRecalculateRouteForYaw;
    _Bool _isRecalculateRouteForTrafficJam;
    _Bool _weakGPSHasBroadcast;
    id <AMapNaviDriveManagerDelegate> _delegate;
    long long _detectedMode;
    AMapNaviCoreCombine *_driveCore;
    NSMutableArray *_dataRepresentatives;
    NSMutableArray *_eventListeners;
    NSArray *_allRouteIDs;
    NSDictionary *_allNaviRoutes;
    NSMutableArray *_backupRoutes;
    long long _currentNaviRouteID;
    AMapNaviRoute *_currentNaviRoute;
    AMapNaviInfo *_currentNaviInfo;
    AMapNaviLocation *_currentCarLocation;
    UIImage *_crossImage;
    NSArray *_laneInfo;
    NSArray *_trafficStatus;
    NSArray *_trafficFacilities;
    AMapNaviCruiseInfo *_cruiseInfo;
    AMapNaviCongestionInfo *_congestionInfo;
    NSArray *_currentCameraInfos;
    NSArray *_currentServiceAreaInfos;
    UIImage *_turnIconImage;
    long long _turnIconType;
    AMapNaviParallelRoadStatus *_parallelRoadStatus;
    NSTimer *_weakGPSSingalTimer;
    AMapNaviTimerTarget *_weakGPSSingalTimerTarget;
    NSTimer *_weakGPSSingalLast2MinsTimer;
    AMapNaviTimerTarget *_weakGPSSingalLast2MinsTimerTarget;
    NSTimer *_routeNotificationVoiceTextTimer;
    AMapNaviTimerTarget *_routeNotificationVoiceTextTimerTarget;
    AMapNaviRouteNotifyData *_routeNotifyData;
    NSTimer *_waitValidLocationTimer;
    AMapNaviTimerTarget *_waitValidLocationTimerTarget;
    long long _drivingStrategyThatCalculateRouteWithoutStartPoint;
    NSTimer *_callStopNaviAfterEmulatorHasArriveTimer;
    AMapNaviTimerTarget *_callStopNaviAfterEmulatorHasArriveTimerTarget;
    MAMapView *_crossMapViewFromOuter;
    MAMapView *_crossMapViewInternalInit;
    AMapNaviCameraInfo *_internalCameraStart;
    AMapNaviCameraInfo *_internalCameraEnd;
    long long _internalCameraState;
    AMapNaviPOIInfo *_endPoiObj;
    NSArray *_wayPoiObjs;
    AMapNaviSearchManager *_searchManager;
    AMapNaviPOIInfo *_prefixStartPoiObj;
    AMapNaviPOIInfo *_prefixEndPoiObj;
    NSMutableArray *_prefixWayPoiObjs;
    long long _prefixStrategy;
    AMapNaviBatchRequest *_currentBatchRequest;
    id <AMapNaviDriveManagerInternalDelegate> _internalDelegate;
}

+ (_Bool)sharedInstanceHasInit;
+ (long long)instanceRetainCount;
+ (_Bool)destroyInstance;
+ (id)sharedInstance;
+ (void)testToLog;
@property(nonatomic) __weak id <AMapNaviDriveManagerInternalDelegate> internalDelegate; // @synthesize internalDelegate=_internalDelegate;
@property(retain) AMapNaviBatchRequest *currentBatchRequest; // @synthesize currentBatchRequest=_currentBatchRequest;
@property(nonatomic) long long prefixStrategy; // @synthesize prefixStrategy=_prefixStrategy;
@property(retain, nonatomic) NSMutableArray *prefixWayPoiObjs; // @synthesize prefixWayPoiObjs=_prefixWayPoiObjs;
@property(retain, nonatomic) AMapNaviPOIInfo *prefixEndPoiObj; // @synthesize prefixEndPoiObj=_prefixEndPoiObj;
@property(retain, nonatomic) AMapNaviPOIInfo *prefixStartPoiObj; // @synthesize prefixStartPoiObj=_prefixStartPoiObj;
@property(retain, nonatomic) AMapNaviSearchManager *searchManager; // @synthesize searchManager=_searchManager;
@property(retain, nonatomic) NSArray *wayPoiObjs; // @synthesize wayPoiObjs=_wayPoiObjs;
@property(retain, nonatomic) AMapNaviPOIInfo *endPoiObj; // @synthesize endPoiObj=_endPoiObj;
@property(nonatomic) long long internalCameraState; // @synthesize internalCameraState=_internalCameraState;
@property(retain, nonatomic) AMapNaviCameraInfo *internalCameraEnd; // @synthesize internalCameraEnd=_internalCameraEnd;
@property(retain, nonatomic) AMapNaviCameraInfo *internalCameraStart; // @synthesize internalCameraStart=_internalCameraStart;
@property(retain, nonatomic) MAMapView *crossMapViewInternalInit; // @synthesize crossMapViewInternalInit=_crossMapViewInternalInit;
@property(nonatomic) __weak MAMapView *crossMapViewFromOuter; // @synthesize crossMapViewFromOuter=_crossMapViewFromOuter;
@property(retain, nonatomic) AMapNaviTimerTarget *callStopNaviAfterEmulatorHasArriveTimerTarget; // @synthesize callStopNaviAfterEmulatorHasArriveTimerTarget=_callStopNaviAfterEmulatorHasArriveTimerTarget;
@property(retain, nonatomic) NSTimer *callStopNaviAfterEmulatorHasArriveTimer; // @synthesize callStopNaviAfterEmulatorHasArriveTimer=_callStopNaviAfterEmulatorHasArriveTimer;
@property(nonatomic) long long drivingStrategyThatCalculateRouteWithoutStartPoint; // @synthesize drivingStrategyThatCalculateRouteWithoutStartPoint=_drivingStrategyThatCalculateRouteWithoutStartPoint;
@property(retain, nonatomic) AMapNaviTimerTarget *waitValidLocationTimerTarget; // @synthesize waitValidLocationTimerTarget=_waitValidLocationTimerTarget;
@property(retain, nonatomic) NSTimer *waitValidLocationTimer; // @synthesize waitValidLocationTimer=_waitValidLocationTimer;
@property(retain, nonatomic) AMapNaviRouteNotifyData *routeNotifyData; // @synthesize routeNotifyData=_routeNotifyData;
@property(retain, nonatomic) AMapNaviTimerTarget *routeNotificationVoiceTextTimerTarget; // @synthesize routeNotificationVoiceTextTimerTarget=_routeNotificationVoiceTextTimerTarget;
@property(retain, nonatomic) NSTimer *routeNotificationVoiceTextTimer; // @synthesize routeNotificationVoiceTextTimer=_routeNotificationVoiceTextTimer;
@property(nonatomic) _Bool weakGPSHasBroadcast; // @synthesize weakGPSHasBroadcast=_weakGPSHasBroadcast;
@property(retain, nonatomic) AMapNaviTimerTarget *weakGPSSingalLast2MinsTimerTarget; // @synthesize weakGPSSingalLast2MinsTimerTarget=_weakGPSSingalLast2MinsTimerTarget;
@property(retain, nonatomic) NSTimer *weakGPSSingalLast2MinsTimer; // @synthesize weakGPSSingalLast2MinsTimer=_weakGPSSingalLast2MinsTimer;
@property(retain, nonatomic) AMapNaviTimerTarget *weakGPSSingalTimerTarget; // @synthesize weakGPSSingalTimerTarget=_weakGPSSingalTimerTarget;
@property(retain, nonatomic) NSTimer *weakGPSSingalTimer; // @synthesize weakGPSSingalTimer=_weakGPSSingalTimer;
@property(retain, nonatomic) AMapNaviParallelRoadStatus *parallelRoadStatus; // @synthesize parallelRoadStatus=_parallelRoadStatus;
@property(nonatomic) long long turnIconType; // @synthesize turnIconType=_turnIconType;
@property(retain, nonatomic) UIImage *turnIconImage; // @synthesize turnIconImage=_turnIconImage;
@property(retain, nonatomic) NSArray *currentServiceAreaInfos; // @synthesize currentServiceAreaInfos=_currentServiceAreaInfos;
@property(retain, nonatomic) NSArray *currentCameraInfos; // @synthesize currentCameraInfos=_currentCameraInfos;
@property(retain, nonatomic) AMapNaviCongestionInfo *congestionInfo; // @synthesize congestionInfo=_congestionInfo;
@property(retain, nonatomic) AMapNaviCruiseInfo *cruiseInfo; // @synthesize cruiseInfo=_cruiseInfo;
@property(retain, nonatomic) NSArray *trafficFacilities; // @synthesize trafficFacilities=_trafficFacilities;
@property(retain, nonatomic) NSArray *trafficStatus; // @synthesize trafficStatus=_trafficStatus;
@property(retain, nonatomic) NSArray *laneInfo; // @synthesize laneInfo=_laneInfo;
@property(retain, nonatomic) UIImage *crossImage; // @synthesize crossImage=_crossImage;
@property(retain, nonatomic) AMapNaviLocation *currentCarLocation; // @synthesize currentCarLocation=_currentCarLocation;
@property(retain, nonatomic) AMapNaviInfo *currentNaviInfo; // @synthesize currentNaviInfo=_currentNaviInfo;
@property(retain, nonatomic) AMapNaviRoute *currentNaviRoute; // @synthesize currentNaviRoute=_currentNaviRoute;
@property(nonatomic) long long currentNaviRouteID; // @synthesize currentNaviRouteID=_currentNaviRouteID;
@property(retain, nonatomic) NSMutableArray *backupRoutes; // @synthesize backupRoutes=_backupRoutes;
@property(retain, nonatomic) NSDictionary *allNaviRoutes; // @synthesize allNaviRoutes=_allNaviRoutes;
@property(retain, nonatomic) NSArray *allRouteIDs; // @synthesize allRouteIDs=_allRouteIDs;
@property(retain, nonatomic) NSMutableArray *eventListeners; // @synthesize eventListeners=_eventListeners;
@property(retain, nonatomic) NSMutableArray *dataRepresentatives; // @synthesize dataRepresentatives=_dataRepresentatives;
@property(retain, nonatomic) AMapNaviCoreCombine *driveCore; // @synthesize driveCore=_driveCore;
@property(nonatomic) long long detectedMode; // @synthesize detectedMode=_detectedMode;
@property(nonatomic) _Bool isRecalculateRouteForTrafficJam; // @synthesize isRecalculateRouteForTrafficJam=_isRecalculateRouteForTrafficJam;
@property(nonatomic) _Bool isRecalculateRouteForYaw; // @synthesize isRecalculateRouteForYaw=_isRecalculateRouteForYaw;
@property(nonatomic) _Bool updateTrafficInfo; // @synthesize updateTrafficInfo=_updateTrafficInfo;
@property(nonatomic) _Bool updateCameraInfo; // @synthesize updateCameraInfo=_updateCameraInfo;
@property(nonatomic) __weak id <AMapNaviDriveManagerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (id)addBackgroundColorToTurnIconImage:(id)arg1;
- (void)naviCoreCombineOnUpdateNoNaviInfor:(id)arg1;
- (void)naviCoreCombineOnUpdateTrafficFacilities:(id)arg1;
- (void)naviCoreCombineOnUpdateParallelRoad:(id)arg1;
- (void)naviCoreCombineOnUpdateCongestionInfo:(id)arg1;
- (void)naviCoreCombineOnUpdateLightBar;
- (void)naviCoreCombineOnHideLane;
- (void)naviCoreCombineOnShowLaneWithLaneBackInfo:(id)arg1 laneSelectInfo:(id)arg2;
- (void)naviCoreCombineOnRenderManeuverIcon:(id)arg1 turnIconType:(long long)arg2;
- (void)naviCoreCombineOnHideCrossImage;
- (void)naviCoreCombineOnShowCrossImage:(id)arg1 imageType:(int)arg2;
- (void)naviCoreCombineOnShowCrossImageWithImageData:(id)arg1;
- (id)crossMapView:(struct CGRect)arg1;
- (void)naviCoreCombineOnArrivedWayPoint:(int)arg1;
- (void)naviCoreCombineOnPlayNaviSoundString:(id)arg1 soundStringType:(long long)arg2;
- (_Bool)naviCoreCombineIsNaviPlaying;
- (void)naviCoreCombineOnNaviPlayRing:(int)arg1;
- (void)naviCoreCombineOnCarLocationChangeToLocation:(id)arg1;
- (void)naviCoreCombineOnUpdateSAPA:(id)arg1;
- (void)naviCoreCombineOnUpdateIntervalCameraWithPositionState:(long long)arg1 startInfo:(id)arg2 endInfo:(id)arg3;
- (void)naviCoreCombineOnUpdateCamera:(id)arg1;
- (void)naviCoreCombineOnUpdateNaviInfo:(id)arg1;
- (void)naviDriveCoreOnEndEmulatorNavi;
- (void)naviDriveCoreOnArrivedDestination;
- (void)naviCoreCombineOnNaviStop:(int)arg1;
- (void)naviCoreCombineOnRerouteWithType:(long long)arg1;
- (void)notifyDelegateAndListenerOnPostRouteNotificationMustInMainThread:(id)arg1;
- (void)naviCoreCombineOnUpdateRouteExtraData:(id)arg1 withType:(long long)arg2;
- (void)notifyDelegateAndListenerOnCalculateRouteFailureMustInMainThread:(id)arg1 type:(long long)arg2;
- (void)notifyDelegateAndListenerOnCalculateRouteFailure:(id)arg1 type:(long long)arg2;
- (void)naviCoreCombineOnNewRouteFailure:(id)arg1 type:(long long)arg2 isLocal:(_Bool)arg3;
- (void)notifyDelegateAndListenerOnNewRouteSuccessWithType:(long long)arg1;
- (void)naviCoreCombineOnNewRouteSuccessWithType:(long long)arg1 isLocal:(_Bool)arg2;
- (void)naviCoreCombineOnSuggestChangePathFrom:(unsigned long long)arg1 toNewPath:(unsigned long long)arg2 becauseOfSaveTime:(int)arg3;
- (void)naviCoreCombineOnClearAllBackupRoute;
- (void)naviCoreCombineOnDeletePathWithPathIds:(id)arg1;
- (void)naviCoreCombineOnChangeMainPathFailure:(unsigned long long)arg1 type:(int)arg2;
- (void)naviCoreCombineOnChangeCurrentNaviPathWithRouteIndex:(int)arg1;
- (id)nextThreeSegmentRoadNameInRoute:(id)arg1;
- (id)createNotifyDataAfterChangeCurrentNaviPath:(_Bool)arg1 failureType:(int)arg2;
- (void)updateWhenNeedRefreshAllNewBackupRoutesExceptCurrentNaviRoute;
- (void)updateAfterSelectNaviRouteWithRouteIDMustInMainThread:(long long)arg1 isFromChangeMainPath:(_Bool)arg2;
- (id)getRouteTrafficStatuses:(id)arg1;
- (id)buildNaviRouteWithRouteID:(int)arg1;
- (id)buildAllNaviRoutes:(_Bool)arg1;
- (void)removeCallStopNaviAfterEmulatorHasArriveTimer;
- (void)handleToStopNaviAfterEmulatorHasArrive;
- (void)startCallStopNaviAfterEmulatorHasArriveTimer;
- (void)playRouteNotificationVoiceText;
- (void)removeRouteNotificationVoiceTextTimer;
- (void)startRouteNotificationVoiceTextTimer;
- (void)driveManagerActivePlayNaviSoundString:(id)arg1 soundStringType:(long long)arg2;
- (void)playSoundWhenGPSSignalStrengthIsWeak;
- (void)removeWeakGPSSingalLast2MinsTimer;
- (void)startWeakGPSSingalLast2MinsTimer;
- (void)removeWeakGPSSingalTimer;
- (void)startWeakGPSSingalTimer;
- (void)startHandleSoundWithGPSSignalStrength;
- (void)notifyDelegateUpdateGPSSignalStrength:(long long)arg1;
- (void)extendHandleCLMDidUpdateLocation:(id)arg1 offset:(_Bool)arg2;
- (void)performErrorDelegateWithError:(id)arg1;
- (void)performDidChangeAuthorizationStatus:(int)arg1;
- (void)performDidStartNaviDelegateWithNaviTypeMustInMainThread:(long long)arg1;
- (void)performDidStartNaviDelegateWithNaviType:(long long)arg1;
- (void)stopNavi;
- (void)reSelectNaviRouteWithCurrentRouteID;
- (_Bool)startEmulatorNavi;
- (_Bool)startGPSNavi;
- (id)getMostProbableCurrentLocation;
- (void)continueCalculateDriveRouteWithoutStartPoint;
- (void)removeWaitValidLocationTimer;
- (void)startWaitValidLocationTimer;
- (id)convertWayPointsToWayPOIObjs:(id)arg1;
- (_Bool)calculateDriveRouteInternalWithStartInfo:(id)arg1 endInfo:(id)arg2 waysInfo:(id)arg3 drivingStrategy:(long long)arg4;
- (void)navSearchRequest:(id)arg1 didFailWithError:(id)arg2;
- (void)onBatchDone:(id)arg1 result:(id)arg2;
- (void)doThePOIIDBatchRequest:(id)arg1;
- (_Bool)calculateDriveRouteWithStartPOIInfo:(id)arg1 endPOIInfo:(id)arg2 wayPOIInfos:(id)arg3 drivingStrategy:(long long)arg4;
- (_Bool)calculateDriveRouteWithStartPointPOIId:(id)arg1 endPointPOIId:(id)arg2 wayPointsPOIId:(id)arg3 drivingStrategy:(long long)arg4;
- (_Bool)calculateDriveRouteWithStartPoints:(id)arg1 endPoints:(id)arg2 wayPoints:(id)arg3 drivingStrategy:(long long)arg4;
- (_Bool)calculateDriveRouteWithEndPoints:(id)arg1 wayPoints:(id)arg2 drivingStrategy:(long long)arg3;
- (_Bool)recalculateDriveRouteWithDrivingStrategy:(long long)arg1;
- (_Bool)recalculateDriveRouteWithDrivingStrategy:(long long)arg1 rerouteType:(long long)arg2;
- (id)getNaviStatisticsInfo;
- (id)getTrafficStatuses;
- (id)getTrafficStatusesWithStartPosition:(int)arg1 distance:(int)arg2;
- (id)getNaviGuideList;
- (void)setTimeForOneWord:(int)arg1;
- (void)refreshTrafficStatusesManual;
- (_Bool)readTrafficInfoManualWithFrontDistance:(int)arg1;
- (_Bool)setOnlineCarHailingType:(long long)arg1;
- (_Bool)setBroadcastMode:(long long)arg1;
- (_Bool)setVehicleInfo:(id)arg1;
- (void)setVehicleProvince:(id)arg1 number:(id)arg2;
- (_Bool)changeBackupRouteToMainNaviRoute:(id)arg1;
- (_Bool)setMultipleRouteNaviMode:(_Bool)arg1;
- (void)switchParallelRoad:(id)arg1;
- (_Bool)selectNaviRouteWithRouteID:(long long)arg1;
@property(readonly, nonatomic) NSDictionary *naviRoutes;
@property(readonly, nonatomic) NSArray *naviRouteIDs;
@property(readonly, nonatomic) AMapNaviRoute *naviRoute;
@property(readonly, nonatomic) long long naviRouteID;
- (void)authHandler;
- (_Bool)initDriveCore;
- (void)initProperties;
- (_Bool)createDriveManager;
- (id)init;
- (void)dealloc;
- (void)notifyDataRepresentableClearBackupRoutes;
- (void)notifyDataRepresentableUpdateBackupRoutes;
- (void)notifyDataRepresentableUpdateParallelRoadStatus;
- (void)notifyDataRepresentableUpdateServiceAreaInfos;
- (void)notifyDataRepresentableUpdateIntervalCameraInfos;
- (void)notifyDataRepresentableUpdateCameraInfos;
- (void)notifyDataRepresentableUpdateCruiseInfo;
- (void)notifyDataRepresentableUpdateTrafficFacilities;
- (void)notifyDataRepresentableUpdateCongestionInfo;
- (void)notifyDataRepresentableUpdateTrafficStatusMustInMainThread;
- (void)notifyDataRepresentableUpdateTrafficStatus;
- (void)notifyDataRepresentableUpdateLaneInfoMustInMainThread;
- (void)notifyDataRepresentableUpdateLaneInfo;
- (void)notifyDataRepresentableUpdateTurnIconImageMustInMainThread;
- (void)notifyDataRepresentableUpdateTurnIconImage;
- (void)notifyDataRepresentableUpdateCrossImageMustInMainThread;
- (void)notifyDataRepresentableUpdateCrossImage;
- (void)notifyDataRepresentableUpdateCurrentCarLocation;
- (void)notifyDataRepresentableUpdateCurrentNaviInfo;
- (void)notifyDataRepresentableUpdateCurrentNaviRouteMustInMainThread;
- (void)notifyDataRepresentableUpdateCurrentNaviRoute;
- (void)notifyDataRepresentableUpdateCurrentNaviRouteIDMustInMainThread;
- (void)notifyDataRepresentableUpdateCurrentNaviRouteID;
- (void)notifyDataRepresentableUpdateCurrentNaviModeMustInMainThread;
- (void)notifyDataRepresentableUpdateCurrentNaviMode;
- (void)notifyCurrentDriveDataToNewRepresentative:(id)arg1;
- (void)removeUnusefulWrapObjInDataRepresentative;
- (void)removeDataRepresentative:(id)arg1;
- (void)addDataRepresentative:(id)arg1;
- (void)notifyEventListenerOnSuggestChangeMainNaviRoute:(id)arg1;
- (void)notifyEventListenerOnRouteNotification:(id)arg1;
- (void)notifyEventListenerOnNaviPlayRing:(long long)arg1;
- (_Bool)notifyEventListenerIsNaviSoundPlaying;
- (void)notifyEventListenerPlayNaviSoundString:(id)arg1 soundStringType:(long long)arg2;
- (void)notifyEventListenerUpdateGPSSignalStrength:(long long)arg1;
- (void)notifyEventListenerOnArrivedDestination;
- (void)notifyEventListenerDidEndEmulatorNavi;
- (void)notifyEventListenerOnArrivedWayPoint:(int)arg1;
- (void)notifyEventListenerNeedRecalculateRouteForTrafficJam;
- (void)notifyEventListenerNeedRecalculateRouteForYaw;
- (void)notifyEventListenerDidStartNavi:(long long)arg1;
- (void)notifyEventListenerOnCalculateRouteFailure:(id)arg1;
- (void)notifyEventListenerOnCalculateRouteFailure:(id)arg1 type:(long long)arg2;
- (void)notifyEventListenerOnCalculateRouteSuccess:(long long)arg1;
- (void)notifyEventListenerOnCalculateRouteSuccess;
- (void)notifyEventListenerError:(id)arg1;
- (void)removeUnusefulWrapObjInEventListener;
- (void)removeEventListener:(id)arg1;
- (void)addEventListener:(id)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

